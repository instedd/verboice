= render 'shared/project_tabs_and_title', :project => @project, :shared_project => @shared_project

%h2 Phone Book
%p.desc List of all the people that have made or received calls in this project

.ux-collapsible.collapsed.w40.file_upload{"data-on-expanded" => "box grey"}
  %span
    - if project_admin?
      %a.button.fconfiguration{:href => "#"} Manage Phone Book's columns
  .ux-content
    = form_for(@project, :url => update_variables_project_path(@project)) do |f|
      %hr
      %ul.oplist
        = f.fields_for :project_variables do |builder|
          = render 'project_variable_fields', :f => builder
        .add_project_variable
          .ux-optext{class: 'w30', style: 'display: inline-block;'}
            Add new variable
          = link_to_add_fields '', f, :project_variables, :class => 'button clist-add'
      %hr
      .right
        %a.button.ux-collapse-trigger Cancel
        %button.white{:type => "submit"} Confirm
      .clear

%a.button.fimport{:href => project_contacts_path(@project, format: :csv)} Download Phone Book as CSV

- if project_admin?
  .ux-collapsible.collapsed.w40.import_csv{"data-on-expanded" => "box grey"}
    %span
      %a.button.fimport{:href => "#"} Import CSV
    .ux-content
      %span
        The CSV file must be comma-separated and have a header row. After uploading the file, you will be able to choose how each column will be imported.
      = form_tag upload_csv_project_contacts_path(@project), enctype: "multipart/form-data" do
        %input#choose-file{:disabled => "disabled", :placeholder => "Choose File"}/
        .file-upload
          %a.button.farrow.choose-button{href: '#'} Choose a file
          = file_field_tag 'file', class: 'choose'
          %a.button.white.import Import

%br
%br

- if project_admin?
  = link_to 'New Contact', new_project_contact_path(@project), :class => 'cadd'

.contacts-list
  #contactsFilter.filters-box.w30.tablewrapp
    .search
      = form_tag search_project_contacts_path(@project), remote: true, method: 'GET', id: 'filters-form' do
        %p
          Filters
          %span{'data-bind' => 'text: countDescription'}
        %hr
        = hidden_field_tag :filters_json, params[:filters_json] || '[]', 'data-bind' => 'value: json', 'class' => 'filters'
        - [:sort_key, :sort_type, :sort_dir].each do |key|
          = hidden_field_tag key, params[key]
        = render 'shared/contacts_filter'
        %button.fsearch Search

    .create-scheduled-call
      %hr
      = form_tag from_filter_project_scheduled_calls_path(@project) do
        = hidden_field_tag :filters_json, params[:filters_json] || '[]', 'data-bind' => 'value: json'
        %button.fedit Create a scheduled call from these filters

  #contactsList
    = render 'list'

%br.clear

:javascript
  window.variables = #{(@project_variables + @implicit_variables).to_json};
  window.fields = #{@fields.to_json};
  initContactsFilter(#{@contacts.total_count})
